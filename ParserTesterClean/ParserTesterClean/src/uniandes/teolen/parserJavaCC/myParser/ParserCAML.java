/* Generated By:JavaCC: Do not edit this line. ParserCAML.java */
package uniandes.teolen.parserJavaCC.myParser;

import java.util.*;

public class ParserCAML implements ParserCAMLConstants {
        ArrayList<Integer> valoresClaves = new ArrayList<Integer>();
        Integer articleTimes = 0;
        Integer articleErrors = 0;
        Integer bookTimes = 0;
        Integer bookErrors = 0;
        Integer bookletTimes = 0;
        Integer bookletErrors = 0;
        Integer conferenceTimes = 0;
        Integer conferenceErrors = 0;
        Integer inbookTimes = 0;
        Integer inbookErrors = 0;
        Integer incollectionTimes = 0;
        Integer incollectionErrors = 0;
        Integer inproceedingsTimes = 0;
        Integer inproceedingsErrors = 0;
        Integer manualTimes = 0;
        Integer manualErrors = 0;
        Integer masterthesisTimes = 0;
        Integer masterthesisErrors = 0;
        Integer miscTimes = 0;
        Integer miscErrors = 0;
        Integer phdthesisTimes = 0;
        Integer phdthesisErrors = 0;
        Integer proceedingsTimes = 0;
        Integer proceedingsErrors = 0;
        Integer techreportTimes = 0;
        Integer techreportErrors = 0;
        Integer unpublishedTimes = 0;
        Integer unpublishedErrors = 0;

  final public void hr() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        book();
        break;
      case 13:
        article();
        break;
      case 29:
        booklet();
        break;
      case 30:
        conference();
        break;
      case 31:
        inbook();
        break;
      case 32:
        incollection();
        break;
      case 33:
        inproceedings();
        break;
      case 34:
        manual();
        break;
      case 35:
        masterthesis();
        break;
      case 36:
        misc();
        break;
      case 37:
        phdthesis();
        break;
      case 38:
        proceedings();
        break;
      case 39:
        techreport();
        break;
      case 40:
        unpublished();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        valoresClaves.add(articleTimes);
        valoresClaves.add(articleErrors);
        valoresClaves.add(bookTimes);
        valoresClaves.add(bookErrors);
        valoresClaves.add(bookletTimes);
        valoresClaves.add(bookletErrors);
        valoresClaves.add(conferenceTimes);
        valoresClaves.add(conferenceErrors);
        valoresClaves.add(inbookTimes);
        valoresClaves.add(inbookErrors);
        valoresClaves.add(incollectionTimes);
        valoresClaves.add(incollectionErrors);
        valoresClaves.add(inproceedingsTimes);
        valoresClaves.add(inproceedingsErrors);
        valoresClaves.add(manualTimes);
        valoresClaves.add(manualErrors);
        valoresClaves.add(masterthesisTimes);
        valoresClaves.add(masterthesisErrors);
        valoresClaves.add(miscTimes);
        valoresClaves.add(miscErrors);
        valoresClaves.add(phdthesisTimes);
        valoresClaves.add(phdthesisErrors);
        valoresClaves.add(proceedingsTimes);
        valoresClaves.add(proceedingsErrors);
        valoresClaves.add(techreportTimes);
        valoresClaves.add(techreportErrors);
        valoresClaves.add(unpublishedTimes);
        valoresClaves.add(unpublishedErrors);
  }

  final public void article() throws ParseException {
    jj_consume_token(13);
    jj_consume_token(ID);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        break;
      case 16:
        jj_consume_token(16);
        break;
      case 17:
        jj_consume_token(17);
        break;
      case 18:
        jj_consume_token(18);
        break;
      case 19:
        jj_consume_token(19);
        break;
      case 20:
        jj_consume_token(20);
        break;
      case 21:
        jj_consume_token(21);
        break;
      case 22:
        jj_consume_token(22);
        break;
      case 23:
        jj_consume_token(23);
        break;
      case 24:
        jj_consume_token(24);
        break;
      case 25:
        jj_consume_token(25);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMBRES:
        jj_consume_token(NOMBRES);
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(27);
                articleTimes++;
  }

  final public void book() throws ParseException {
    jj_consume_token(28);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
                bookTimes++;
  }

  final public void booklet() throws ParseException {
    jj_consume_token(29);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void conference() throws ParseException {
    jj_consume_token(30);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void inbook() throws ParseException {
    jj_consume_token(31);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void incollection() throws ParseException {
    jj_consume_token(32);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void inproceedings() throws ParseException {
    jj_consume_token(33);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void manual() throws ParseException {
    jj_consume_token(34);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void masterthesis() throws ParseException {
    jj_consume_token(35);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void misc() throws ParseException {
    jj_consume_token(36);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void phdthesis() throws ParseException {
    jj_consume_token(37);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void proceedings() throws ParseException {
    jj_consume_token(38);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void techreport() throws ParseException {
    jj_consume_token(39);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  final public void unpublished() throws ParseException {
    jj_consume_token(40);
    jj_consume_token(ID);
    jj_consume_token(14);
    jj_consume_token(27);
  }

  /** Generated Token Manager. */
  public ParserCAMLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf0002000,0xf0002000,0x4000,0x3ff8000,0xc00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1ff,0x1ff,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ParserCAML(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserCAML(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserCAMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserCAML(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserCAMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserCAML(ParserCAMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserCAMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
